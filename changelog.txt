drawio放在src裡面 dictionary更改的部分用紫色標起來了 然後新增了clinic clinicdivision treatment room 的available
喔然後還有在iclinic下面新增了一個changelog.txt
把model中的Boolean改成String(1)，chatGPT說這樣比較保險，我也不確定，如果爆炸了再改回來。
把上面提到的string改回bool，然後修正room和treatment，其中有補上散落在doc, div ,c中的relationships
treatment忘記寫search了晚點補
schedule period搞定，然後在period裡面有新發現的update寫法，頗方便的
改的東西：
1.  routes 的 import 如果是新寫的大概會是這個模式
        from fastapi import APIRouter, HTTPException, Depends
        from sqlalchemy.orm import Session
        from models.period import Period
        from services.period_service import create_period ,update_period ,get_period
        from utils.db import get_db
        from schemas.period import PeriodCreate ,PeriodUpdate
2.  schemas 裡面的 available 應該都改成bool了
3.  services 改比較多
    首先是 header 我後來都用這個模式
        from sqlalchemy.orm import Session
        from models.appointment import Appointment
        from schemas.appointment import AppointmentCreate ,AppointmentUpdate
        from fastapi import HTTPException
        from passlib.context import CryptContext
        from sqlalchemy.orm.exc import NoResultFound
    然後是update的部分從period開始更改的，用 model_dump() 來進行更改，就跟 create 的時候一樣，這樣就不需要每一項寫出來，但是因為用 model_dump() 的話 None 也會被一併拿去更新，所以在看到 None 得時候要跳過。
        def update_appointment(db: Session, pid: str, sid: str, date: str, order: int, new: AppointmentUpdate):
        appointment = db.query(Appointment).filter_by(
            pid=pid,
            sid=sid,
            date=date,
            order=order
        ).first()
        if not appointment:
            raise HTTPException(status_code=404, detail="Appointment not found")
        appointment_data = new.model_dump()
        for key ,value in appointment_data.items():
            if value is not None:
                setattr(appointment ,key ,value)
        db.commit()
        db.refresh(appointment)
        return {"message": "Appointment name updated successfully", "appointment": appointment}
    至於 get 的部分忘記為甚麼了，但總之就是得每一項都寫出來，可能有用迴圈的方法辣，但那個可以晚點有時間再改。
    建立好relationship
    然後把order改成int
4.  generator架構：以period為例
        from fastapi.testclient import TestClient
from main import app
from sqlalchemy.orm import Session
from utils.db import SessionLocal
from models import Clinic
from faker import Faker
from contextlib import contextmanager
import random
import pytest
from utils.id_check import id_generator
from datetime import time, timedelta

##pytest.skip(allow_module_level=True)

@contextmanager
def get_db_session():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

fake = Faker()

client = TestClient(app)

def generate_period_payload(cids):

    perid = f"{random.randint(0, 9999999999):010d}"
    cid = random.choice(cids)
    weekday = str(random.randint(1, 7))
    start_hour = random.randint(6, 17) 
    start_minute = random.choice([0, 15, 30, 45])
    starttime = time(hour=start_hour, minute=start_minute)

    end_hour = random.randint(start_hour + 1, 23)
    end_minute = random.choice([0, 15, 30, 45])
    endtime = time(hour=end_hour, minute=end_minute)

    return {
        "perid": perid,
        "cid": cid,
        "weekday": weekday,
        "starttime": starttime.strftime("%H:%M"),
        "endtime": endtime.strftime("%H:%M"),
    }

def get_existing_cids():

    with SessionLocal() as db:
        cids = [clinic.cid for clinic in db.query(Clinic).all()]
    return cids

def test_create_periods():

    count = 50  # 設定要生成的 Period 數量
    cids = get_existing_cids()  # 獲取有效的 Clinic Ids

    if not cids:
        raise ValueError("資料庫中沒有可用的 Clinics 資料，無法生成 Period 資料！")

    created_count = 0
    for _ in range(count):
        payload = generate_period_payload(cids)
        response = client.post("/period", json=payload)
        print(f"Payload: {payload}")
        print(f"Response: {response.status_code} - {response.json()}")

        assert response.status_code == 201, f"Failed at payload: {payload}"
        created_count += 1

    print(f"成功新增 {created_count} 筆 Period 資料！")


